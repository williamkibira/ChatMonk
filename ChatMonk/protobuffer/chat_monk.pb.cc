// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_monk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat_monk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuffer {

void protobuf_ShutdownFile_chat_5fmonk_2eproto() {
  delete FriendDef::default_instance_;
  delete RegistrationPack::default_instance_;
  delete GroupRegistration::default_instance_;
  delete GroupDef::default_instance_;
  delete Attachment::default_instance_;
  delete Message::default_instance_;
  delete InvitationOut::default_instance_;
  delete InvitationDef::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_chat_5fmonk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_chat_5fmonk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FriendDef::default_instance_ = new FriendDef();
  RegistrationPack::default_instance_ = new RegistrationPack();
  GroupRegistration::default_instance_ = new GroupRegistration();
  GroupDef::default_instance_ = new GroupDef();
  Attachment::default_instance_ = new Attachment();
  Message::default_instance_ = new Message();
  InvitationOut::default_instance_ = new InvitationOut();
  InvitationDef::default_instance_ = new InvitationDef();
  FriendDef::default_instance_->InitAsDefaultInstance();
  RegistrationPack::default_instance_->InitAsDefaultInstance();
  GroupRegistration::default_instance_->InitAsDefaultInstance();
  GroupDef::default_instance_->InitAsDefaultInstance();
  Attachment::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  InvitationOut::default_instance_->InitAsDefaultInstance();
  InvitationDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_5fmonk_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chat_5fmonk_2eproto_once_);
void protobuf_AddDesc_chat_5fmonk_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chat_5fmonk_2eproto_once_,
                 &protobuf_AddDesc_chat_5fmonk_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_5fmonk_2eproto {
  StaticDescriptorInitializer_chat_5fmonk_2eproto() {
    protobuf_AddDesc_chat_5fmonk_2eproto();
  }
} static_descriptor_initializer_chat_5fmonk_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FriendDef::kFirstNameFieldNumber;
const int FriendDef::kLastNameFieldNumber;
const int FriendDef::kPhoneNumberFieldNumber;
const int FriendDef::kEmailFieldNumber;
const int FriendDef::kFriendIdFieldNumber;
const int FriendDef::kPhotoUriFieldNumber;
#endif  // !_MSC_VER

FriendDef::FriendDef()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendDef::InitAsDefaultInstance() {
}

FriendDef::FriendDef(const FriendDef& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDef::SharedCtor() {
  _cached_size_ = 0;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  photo_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDef::~FriendDef() {
  SharedDtor();
}

void FriendDef::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (friend_id_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_id_;
  }
  if (photo_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete photo_uri_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendDef& FriendDef::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

FriendDef* FriendDef::default_instance_ = NULL;

FriendDef* FriendDef::New() const {
  return new FriendDef;
}

void FriendDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
        phone_number_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_friend_id()) {
      if (friend_id_ != &::google::protobuf::internal::kEmptyString) {
        friend_id_->clear();
      }
    }
    if (has_photo_uri()) {
      if (photo_uri_ != &::google::protobuf::internal::kEmptyString) {
        photo_uri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_name;
        break;
      }

      // optional string last_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone_number;
        break;
      }

      // optional string phone_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_friend_id;
        break;
      }

      // optional string friend_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friend_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_photo_uri;
        break;
      }

      // optional string photo_uri = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_photo_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_uri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string first_name = 1;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->first_name(), output);
  }

  // optional string last_name = 2;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_name(), output);
  }

  // optional string phone_number = 3;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone_number(), output);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional string friend_id = 5;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->friend_id(), output);
  }

  // optional string photo_uri = 6;
  if (has_photo_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->photo_uri(), output);
  }

}

int FriendDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string first_name = 1;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // optional string last_name = 2;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // optional string phone_number = 3;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_number());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string friend_id = 5;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friend_id());
    }

    // optional string photo_uri = 6;
    if (has_photo_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photo_uri());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDef::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendDef*>(&from));
}

void FriendDef::MergeFrom(const FriendDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_photo_uri()) {
      set_photo_uri(from.photo_uri());
    }
  }
}

void FriendDef::CopyFrom(const FriendDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDef::IsInitialized() const {

  return true;
}

void FriendDef::Swap(FriendDef* other) {
  if (other != this) {
    std::swap(first_name_, other->first_name_);
    std::swap(last_name_, other->last_name_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(email_, other->email_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(photo_uri_, other->photo_uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendDef::GetTypeName() const {
  return "protobuffer.FriendDef";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistrationPack::kFirstNameFieldNumber;
const int RegistrationPack::kLastNameFieldNumber;
const int RegistrationPack::kPhoneNumberFieldNumber;
const int RegistrationPack::kEmailFieldNumber;
const int RegistrationPack::kPhotoFieldNumber;
const int RegistrationPack::kUserIdFieldNumber;
const int RegistrationPack::kPhoneNumbersFieldNumber;
const int RegistrationPack::kFriendsFieldNumber;
#endif  // !_MSC_VER

RegistrationPack::RegistrationPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistrationPack::InitAsDefaultInstance() {
}

RegistrationPack::RegistrationPack(const RegistrationPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistrationPack::SharedCtor() {
  _cached_size_ = 0;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistrationPack::~RegistrationPack() {
  SharedDtor();
}

void RegistrationPack::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (photo_ != &::google::protobuf::internal::kEmptyString) {
    delete photo_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistrationPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistrationPack& RegistrationPack::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

RegistrationPack* RegistrationPack::default_instance_ = NULL;

RegistrationPack* RegistrationPack::New() const {
  return new RegistrationPack;
}

void RegistrationPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
        phone_number_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_photo()) {
      if (photo_ != &::google::protobuf::internal::kEmptyString) {
        photo_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  phone_numbers_.Clear();
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistrationPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string first_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_name;
        break;
      }

      // required string last_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone_number;
        break;
      }

      // required string phone_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // required string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_photo;
        break;
      }

      // required bytes photo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_photo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_id;
        break;
      }

      // optional string user_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_phone_numbers;
        break;
      }

      // repeated string phone_numbers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_numbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phone_numbers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_phone_numbers;
        if (input->ExpectTag(66)) goto parse_friends;
        break;
      }

      // repeated .protobuffer.FriendDef friends = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistrationPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string first_name = 1;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->first_name(), output);
  }

  // required string last_name = 2;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_name(), output);
  }

  // required string phone_number = 3;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone_number(), output);
  }

  // required string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // required bytes photo = 5;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->photo(), output);
  }

  // optional string user_id = 6;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_id(), output);
  }

  // repeated string phone_numbers = 7;
  for (int i = 0; i < this->phone_numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->phone_numbers(i), output);
  }

  // repeated .protobuffer.FriendDef friends = 8;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->friends(i), output);
  }

}

int RegistrationPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string first_name = 1;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // required string last_name = 2;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // required string phone_number = 3;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_number());
    }

    // required string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required bytes photo = 5;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->photo());
    }

    // optional string user_id = 6;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  // repeated string phone_numbers = 7;
  total_size += 1 * this->phone_numbers_size();
  for (int i = 0; i < this->phone_numbers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phone_numbers(i));
  }

  // repeated .protobuffer.FriendDef friends = 8;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistrationPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistrationPack*>(&from));
}

void RegistrationPack::MergeFrom(const RegistrationPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  phone_numbers_.MergeFrom(from.phone_numbers_);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void RegistrationPack::CopyFrom(const RegistrationPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RegistrationPack::Swap(RegistrationPack* other) {
  if (other != this) {
    std::swap(first_name_, other->first_name_);
    std::swap(last_name_, other->last_name_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(email_, other->email_);
    std::swap(photo_, other->photo_);
    std::swap(user_id_, other->user_id_);
    phone_numbers_.Swap(&other->phone_numbers_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistrationPack::GetTypeName() const {
  return "protobuffer.RegistrationPack";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupRegistration::kGroupNameFieldNumber;
const int GroupRegistration::kCreatorIdFieldNumber;
const int GroupRegistration::kGroupDescriptionFieldNumber;
const int GroupRegistration::kGroupPhotoFieldNumber;
const int GroupRegistration::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GroupRegistration::GroupRegistration()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupRegistration::InitAsDefaultInstance() {
}

GroupRegistration::GroupRegistration(const GroupRegistration& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupRegistration::SharedCtor() {
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupRegistration::~GroupRegistration() {
  SharedDtor();
}

void GroupRegistration::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_id_;
  }
  if (group_description_ != &::google::protobuf::internal::kEmptyString) {
    delete group_description_;
  }
  if (group_photo_ != &::google::protobuf::internal::kEmptyString) {
    delete group_photo_;
  }
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupRegistration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupRegistration& GroupRegistration::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

GroupRegistration* GroupRegistration::default_instance_ = NULL;

GroupRegistration* GroupRegistration::New() const {
  return new GroupRegistration;
}

void GroupRegistration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    if (has_creator_id()) {
      if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
        creator_id_->clear();
      }
    }
    if (has_group_description()) {
      if (group_description_ != &::google::protobuf::internal::kEmptyString) {
        group_description_->clear();
      }
    }
    if (has_group_photo()) {
      if (group_photo_ != &::google::protobuf::internal::kEmptyString) {
        group_photo_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creator_id;
        break;
      }

      // required string creator_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_description;
        break;
      }

      // required string group_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_photo;
        break;
      }

      // required bytes group_photo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_photo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_group_id;
        break;
      }

      // optional string group_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_name(), output);
  }

  // required string creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->creator_id(), output);
  }

  // required string group_description = 3;
  if (has_group_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_description(), output);
  }

  // required bytes group_photo = 4;
  if (has_group_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->group_photo(), output);
  }

  // optional string group_id = 5;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->group_id(), output);
  }

}

int GroupRegistration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_id());
    }

    // required string group_description = 3;
    if (has_group_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_description());
    }

    // required bytes group_photo = 4;
    if (has_group_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_photo());
    }

    // optional string group_id = 5;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRegistration::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupRegistration*>(&from));
}

void GroupRegistration::MergeFrom(const GroupRegistration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_description()) {
      set_group_description(from.group_description());
    }
    if (from.has_group_photo()) {
      set_group_photo(from.group_photo());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
}

void GroupRegistration::CopyFrom(const GroupRegistration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupRegistration::Swap(GroupRegistration* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_description_, other->group_description_);
    std::swap(group_photo_, other->group_photo_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupRegistration::GetTypeName() const {
  return "protobuffer.GroupRegistration";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupDef::kGroupNameFieldNumber;
const int GroupDef::kGroupCreatorFieldNumber;
const int GroupDef::kGroupDescriptionFieldNumber;
const int GroupDef::kGroupPhotoUriFieldNumber;
const int GroupDef::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GroupDef::GroupDef()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupDef::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_creator_ = const_cast< ::protobuffer::FriendDef*>(
      ::protobuffer::FriendDef::internal_default_instance());
#else
  group_creator_ = const_cast< ::protobuffer::FriendDef*>(&::protobuffer::FriendDef::default_instance());
#endif
}

GroupDef::GroupDef(const GroupDef& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupDef::SharedCtor() {
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_creator_ = NULL;
  group_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_photo_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDef::~GroupDef() {
  SharedDtor();
}

void GroupDef::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_description_ != &::google::protobuf::internal::kEmptyString) {
    delete group_description_;
  }
  if (group_photo_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete group_photo_uri_;
  }
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_creator_;
  }
}

void GroupDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupDef& GroupDef::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

GroupDef* GroupDef::default_instance_ = NULL;

GroupDef* GroupDef::New() const {
  return new GroupDef;
}

void GroupDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    if (has_group_creator()) {
      if (group_creator_ != NULL) group_creator_->::protobuffer::FriendDef::Clear();
    }
    if (has_group_description()) {
      if (group_description_ != &::google::protobuf::internal::kEmptyString) {
        group_description_->clear();
      }
    }
    if (has_group_photo_uri()) {
      if (group_photo_uri_ != &::google::protobuf::internal::kEmptyString) {
        group_photo_uri_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_creator;
        break;
      }

      // optional .protobuffer.FriendDef group_creator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_creator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_description;
        break;
      }

      // optional string group_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_photo_uri;
        break;
      }

      // optional string group_photo_uri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_photo_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_photo_uri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_group_id;
        break;
      }

      // optional string group_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_name(), output);
  }

  // optional .protobuffer.FriendDef group_creator = 2;
  if (has_group_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_creator(), output);
  }

  // optional string group_description = 3;
  if (has_group_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_description(), output);
  }

  // optional string group_photo_uri = 4;
  if (has_group_photo_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->group_photo_uri(), output);
  }

  // optional string group_id = 5;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->group_id(), output);
  }

}

int GroupDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional .protobuffer.FriendDef group_creator = 2;
    if (has_group_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_creator());
    }

    // optional string group_description = 3;
    if (has_group_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_description());
    }

    // optional string group_photo_uri = 4;
    if (has_group_photo_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_photo_uri());
    }

    // optional string group_id = 5;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDef::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupDef*>(&from));
}

void GroupDef::MergeFrom(const GroupDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_creator()) {
      mutable_group_creator()->::protobuffer::FriendDef::MergeFrom(from.group_creator());
    }
    if (from.has_group_description()) {
      set_group_description(from.group_description());
    }
    if (from.has_group_photo_uri()) {
      set_group_photo_uri(from.group_photo_uri());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
}

void GroupDef::CopyFrom(const GroupDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupDef::Swap(GroupDef* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    std::swap(group_creator_, other->group_creator_);
    std::swap(group_description_, other->group_description_);
    std::swap(group_photo_uri_, other->group_photo_uri_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupDef::GetTypeName() const {
  return "protobuffer.GroupDef";
}


// ===================================================================

#ifndef _MSC_VER
const int Attachment::kNameFieldNumber;
const int Attachment::kServerFilePathFieldNumber;
const int Attachment::kFileSizeFieldNumber;
const int Attachment::kHomePathFieldNumber;
#endif  // !_MSC_VER

Attachment::Attachment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Attachment::InitAsDefaultInstance() {
}

Attachment::Attachment(const Attachment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Attachment::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = 0;
  home_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attachment::~Attachment() {
  SharedDtor();
}

void Attachment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (server_file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete server_file_path_;
  }
  if (home_path_ != &::google::protobuf::internal::kEmptyString) {
    delete home_path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Attachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Attachment& Attachment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

Attachment* Attachment::default_instance_ = NULL;

Attachment* Attachment::New() const {
  return new Attachment;
}

void Attachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_server_file_path()) {
      if (server_file_path_ != &::google::protobuf::internal::kEmptyString) {
        server_file_path_->clear();
      }
    }
    file_size_ = 0;
    if (has_home_path()) {
      if (home_path_ != &::google::protobuf::internal::kEmptyString) {
        home_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_file_path;
        break;
      }

      // optional string server_file_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_file_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_file_size;
        break;
      }

      // optional float file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_home_path;
        break;
      }

      // optional string home_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string server_file_path = 2;
  if (has_server_file_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_file_path(), output);
  }

  // optional float file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->file_size(), output);
  }

  // optional string home_path = 4;
  if (has_home_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->home_path(), output);
  }

}

int Attachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string server_file_path = 2;
    if (has_server_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_file_path());
    }

    // optional float file_size = 3;
    if (has_file_size()) {
      total_size += 1 + 4;
    }

    // optional string home_path = 4;
    if (has_home_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home_path());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attachment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Attachment*>(&from));
}

void Attachment::MergeFrom(const Attachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_server_file_path()) {
      set_server_file_path(from.server_file_path());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_home_path()) {
      set_home_path(from.home_path());
    }
  }
}

void Attachment::CopyFrom(const Attachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attachment::IsInitialized() const {

  return true;
}

void Attachment::Swap(Attachment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(server_file_path_, other->server_file_path_);
    std::swap(file_size_, other->file_size_);
    std::swap(home_path_, other->home_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Attachment::GetTypeName() const {
  return "protobuffer.Attachment";
}


// ===================================================================

bool Message_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_MessageType Message::GRP_MSG;
const Message_MessageType Message::FRND_MSG;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kMessageDataFieldNumber;
const int Message::kSenderIdFieldNumber;
const int Message::kReceiverIdFieldNumber;
const int Message::kMessageTypeFieldNumber;
const int Message::kAttachmentsFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  message_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messagetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (message_data_ != &::google::protobuf::internal::kEmptyString) {
    delete message_data_;
  }
  if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_id_;
  }
  if (receiver_id_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Message& Message::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_data()) {
      if (message_data_ != &::google::protobuf::internal::kEmptyString) {
        message_data_->clear();
      }
    }
    if (has_sender_id()) {
      if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
        sender_id_->clear();
      }
    }
    if (has_receiver_id()) {
      if (receiver_id_ != &::google::protobuf::internal::kEmptyString) {
        receiver_id_->clear();
      }
    }
    messagetype_ = 0;
  }
  attachments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender_id;
        break;
      }

      // required string sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_receiver_id;
        break;
      }

      // required string receiver_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_messageType;
        break;
      }

      // required .protobuffer.Message.MessageType messageType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuffer::Message_MessageType_IsValid(value)) {
            set_messagetype(static_cast< ::protobuffer::Message_MessageType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attachments;
        break;
      }

      // repeated .protobuffer.Attachment attachments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attachments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message_data = 1;
  if (has_message_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_data(), output);
  }

  // required string sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sender_id(), output);
  }

  // required string receiver_id = 3;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->receiver_id(), output);
  }

  // required .protobuffer.Message.MessageType messageType = 4;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->messagetype(), output);
  }

  // repeated .protobuffer.Attachment attachments = 5;
  for (int i = 0; i < this->attachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attachments(i), output);
  }

}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message_data = 1;
    if (has_message_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_data());
    }

    // required string sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_id());
    }

    // required string receiver_id = 3;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_id());
    }

    // required .protobuffer.Message.MessageType messageType = 4;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

  }
  // repeated .protobuffer.Attachment attachments = 5;
  total_size += 1 * this->attachments_size();
  for (int i = 0; i < this->attachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Message*>(&from));
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachments_.MergeFrom(from.attachments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_data()) {
      set_message_data(from.message_data());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(message_data_, other->message_data_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(messagetype_, other->messagetype_);
    attachments_.Swap(&other->attachments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Message::GetTypeName() const {
  return "protobuffer.Message";
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationOut::kSenderIdFieldNumber;
const int InvitationOut::kGroupIdFieldNumber;
const int InvitationOut::kPersonalMessageFieldNumber;
const int InvitationOut::kUniqueIdsFieldNumber;
#endif  // !_MSC_VER

InvitationOut::InvitationOut()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InvitationOut::InitAsDefaultInstance() {
}

InvitationOut::InvitationOut(const InvitationOut& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationOut::SharedCtor() {
  _cached_size_ = 0;
  sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  personal_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationOut::~InvitationOut() {
  SharedDtor();
}

void InvitationOut::SharedDtor() {
  if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_id_;
  }
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (personal_message_ != &::google::protobuf::internal::kEmptyString) {
    delete personal_message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InvitationOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InvitationOut& InvitationOut::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

InvitationOut* InvitationOut::default_instance_ = NULL;

InvitationOut* InvitationOut::New() const {
  return new InvitationOut;
}

void InvitationOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender_id()) {
      if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
        sender_id_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_personal_message()) {
      if (personal_message_ != &::google::protobuf::internal::kEmptyString) {
        personal_message_->clear();
      }
    }
  }
  unique_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InvitationOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_id;
        break;
      }

      // required string group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_personal_message;
        break;
      }

      // optional string personal_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personal_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unique_ids;
        break;
      }

      // repeated string unique_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unique_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unique_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender_id = 1;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender_id(), output);
  }

  // required string group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->group_id(), output);
  }

  // optional string personal_message = 3;
  if (has_personal_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->personal_message(), output);
  }

  // repeated string unique_ids = 4;
  for (int i = 0; i < this->unique_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unique_ids(i), output);
  }

}

int InvitationOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender_id = 1;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_id());
    }

    // required string group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // optional string personal_message = 3;
    if (has_personal_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_message());
    }

  }
  // repeated string unique_ids = 4;
  total_size += 1 * this->unique_ids_size();
  for (int i = 0; i < this->unique_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unique_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationOut::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InvitationOut*>(&from));
}

void InvitationOut::MergeFrom(const InvitationOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  unique_ids_.MergeFrom(from.unique_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_personal_message()) {
      set_personal_message(from.personal_message());
    }
  }
}

void InvitationOut::CopyFrom(const InvitationOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InvitationOut::Swap(InvitationOut* other) {
  if (other != this) {
    std::swap(sender_id_, other->sender_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(personal_message_, other->personal_message_);
    unique_ids_.Swap(&other->unique_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InvitationOut::GetTypeName() const {
  return "protobuffer.InvitationOut";
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationDef::kGroupFieldNumber;
const int InvitationDef::kPersonalMessageFieldNumber;
const int InvitationDef::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

InvitationDef::InvitationDef()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InvitationDef::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_ = const_cast< ::protobuffer::GroupDef*>(
      ::protobuffer::GroupDef::internal_default_instance());
#else
  group_ = const_cast< ::protobuffer::GroupDef*>(&::protobuffer::GroupDef::default_instance());
#endif
}

InvitationDef::InvitationDef(const InvitationDef& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationDef::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  personal_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationDef::~InvitationDef() {
  SharedDtor();
}

void InvitationDef::SharedDtor() {
  if (personal_message_ != &::google::protobuf::internal::kEmptyString) {
    delete personal_message_;
  }
  if (unique_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unique_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_;
  }
}

void InvitationDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InvitationDef& InvitationDef::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chat_5fmonk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chat_5fmonk_2eproto();
#endif
  return *default_instance_;
}

InvitationDef* InvitationDef::default_instance_ = NULL;

InvitationDef* InvitationDef::New() const {
  return new InvitationDef;
}

void InvitationDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::protobuffer::GroupDef::Clear();
    }
    if (has_personal_message()) {
      if (personal_message_ != &::google::protobuf::internal::kEmptyString) {
        personal_message_->clear();
      }
    }
    if (has_unique_id()) {
      if (unique_id_ != &::google::protobuf::internal::kEmptyString) {
        unique_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InvitationDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuffer.GroupDef group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_personal_message;
        break;
      }

      // optional string personal_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personal_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unique_id;
        break;
      }

      // required string unique_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuffer.GroupDef group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->group(), output);
  }

  // optional string personal_message = 2;
  if (has_personal_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->personal_message(), output);
  }

  // required string unique_id = 3;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unique_id(), output);
  }

}

int InvitationDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuffer.GroupDef group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

    // optional string personal_message = 2;
    if (has_personal_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_message());
    }

    // required string unique_id = 3;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unique_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationDef::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InvitationDef*>(&from));
}

void InvitationDef::MergeFrom(const InvitationDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::protobuffer::GroupDef::MergeFrom(from.group());
    }
    if (from.has_personal_message()) {
      set_personal_message(from.personal_message());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
  }
}

void InvitationDef::CopyFrom(const InvitationDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void InvitationDef::Swap(InvitationDef* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(personal_message_, other->personal_message_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InvitationDef::GetTypeName() const {
  return "protobuffer.InvitationDef";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuffer

// @@protoc_insertion_point(global_scope)
